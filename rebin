#!/usr/bin/env python3

from sys import argv
from os.path import expanduser, isfile, basename, realpath, exists
from glob import glob
from subprocess import check_output

import yaml

if exists(realpath('../bu.bin/bin')):
    BASE=realpath('../bu.bin/bin')
else:
    BASE=expanduser("~/.bu.bin/bin")

def haveyfm(pth):
    """Есть ли в файле yfm"""
    t = open(pth).readlines()
    syntax = detect_lang(pth)
    if syntax is 'php':
        return '---' in t[2]
    if len(t) >= 2:
        return '---' in t[1]

def havehashbang(pth):
    """Является ли файл исполняемым скриптом"""
    t = open(pth).readlines()
    return '#!' in t[0]

def correct_file(p):
    """Проверить файл на корректность перед публикацией"""
    if not isfile(p):
        return False
    if not haveyfm(p):
        return False
    if not havehashbang(p):
        return False
    if not detect_lang(p):
        return False
    return True

def detect_lang(pth):
    """Определить язык файла"""
    t = open(pth).readlines()
    if 'bash' in t[0]:
        return 'bash'
    if 'python' in t[0]:
        return 'python'
    if 'php' in t[0]:
        return 'php'
    if 'ruby' in t[0]:
        return 'ruby'
    if 'node' in t[0]:
        return 'node'

def clear_bin():
    """Зачистить от старых страниц папку"""
    try:
        check_output("rm _bin/*", shell=True)
    except:
        pass

def extractyfm(pth):
    """Достать yfm из файла"""
    t = open(pth).readlines()
    c = ""
    syntax = detect_lang(pth)
    startline = 2
    if syntax is 'php':
        startline = 3
    for line in t[startline:]:
        if '---' in line:
            return yaml.safe_load(c)
        if syntax is 'node':
            c = c + line.lstrip('/')
        else:
            c = c + line.lstrip('#')

def code_without_yfm(pth):
    """Достать код файла без yfm"""
    t = open(pth).readlines()
    c = t[0];
    skip = True
    syntax = detect_lang(pth)
    startline = 2
    if syntax is 'php':
        c = c + t[1]
        startline = 3
    for line in t[startline:]:
        if '---' in line:
            skip = False
            continue
        if not skip:
            c = c + line
    return c

def dumpyfm(data):
    """Сериализовать объект в yaml """
    return yaml.dump(data, allow_unicode=True, default_flow_style=False)

def save_as_page(p, t):
    """Сохранить как страницу для сайта"""
    with open('_bin/{}.md'.format(basename(p)), 'w') as f:
        f.write("---\n")
        f.write(dumpyfm(t))
        f.write("---\n{% raw %}\n")
        f.write("```{}\n".format(t['lang']))
        f.write(code_without_yfm(p))
        f.write("```\n{% endraw %}")

def main():
    clear_bin()
    for p in glob(BASE+'/*'):
        if correct_file(p):
            print(p)
            t = extractyfm(p)
            t['layout'] = 'bin'
            t['name'] = basename(p)
            t['lang'] = detect_lang(p)
            save_as_page(p, t)

if __name__ == '__main__':
    main()
